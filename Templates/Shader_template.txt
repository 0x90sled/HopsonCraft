#include "Matrix_Math.h"

namespace Shader
{
    name::name(const std::string& vertexShaderFile, const std::string& fragmentShaderFile)
    {
        bindAttributes();
        getUniformLocations();

        useProgram();
        loadMatrix4(m_projectionMatrixLocation, Maths::createPerspectiveMatrix());
        glUseProgram(0);
    }

    void name::bindAttributes()
    {
        bindAttribute(0, "inVertexCoords");
        bindAttribute(1, "inTextureCoords");
    }

    void name::getUniformLocations()
    {

    }
}




#include "Shader.h"

namespace Shader
{
    class name : public Shader_Program
    {
        public:
            name(const std::string& vertexShaderFile, const std::string& fragmentShaderFile);

        private:
            void bindAttributes() override;
            void getUniformLocations() override;
    };
}
